{"version":3,"sources":["components/CountryContext.js","components/Input.js","components/Select.js","components/SearchBar.js","components/Header.js","components/Image.js","components/ParaSection.js","components/InfoSection.js","components/CountryCard.js","components/ImagesContainer.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["CountryContext","createContext","CountryProvider","children","useState","name","setName","population","setPopulation","region","setRegion","capital","setCapital","nativeName","setNativeName","subRegion","setSubRegion","domain","setDomain","currencies","setCurrencies","languages","setLanguages","borders","setBorders","data","setData","selectedRegion","setSelectedRegion","Provider","value","Input","classname","type","placeholder","className","Select","action","regions","options","map","index","defaultValue","onChange","id","SearchBar","country","useContext","handleSearch","e","preventDefault","target","tagName","string","card","document","getElementById","scrollIntoView","querySelector","window","scrollBy","scrollToCard","toLowerCase","dat","selectedID","filter","item","body","scrollTop","documentElement","err","console","log","onSubmit","href","Header","onClick","toggleDarkMode","element","btn","getElementsByClassName","classList","toggle","innerText","Image","source","rel","src","alt","ParaSection","quiz","reply","InfoSection","props","toLocaleString","CountryCard","nation","flag","ImagesContainer","Footer","text","App","useEffect","fetchData","a","fetch","response","json","forEach","normalize","replace","sort","b","nameA","nameB","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d5f89098.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react'\n\nexport const CountryContext = createContext();\n\nexport const CountryProvider = ({children}) => {\n\n    const [ name, setName ] = useState();\n    const [ population, setPopulation ] = useState();\n    const [ region, setRegion ] = useState();\n    const [ capital, setCapital ] = useState();\n    const [ nativeName, setNativeName ] = useState();\n    const [ subRegion, setSubRegion ] = useState();\n    const [ domain, setDomain ] = useState();\n    const [ currencies, setCurrencies ] = useState([]);\n    const [ languages, setLanguages ] = useState([]);\n    const [ borders, setBorders ] = useState([]);\n    const [ data, setData ] = useState([]);\n    const [ selectedRegion, setSelectedRegion ] = useState([]);\n\n  return (\n\n    <CountryContext.Provider\n      value={{\n        name,\n        population,\n        region,\n        capital,\n        nativeName,\n        subRegion,\n        domain,\n        currencies,\n        languages,\n        borders,\n        data,\n        selectedRegion,\n        setName,\n        setPopulation,\n        setRegion,\n        setCapital,\n        setNativeName,\n        setSubRegion,\n        setDomain,\n        setCurrencies,\n        setLanguages,\n        setBorders,\n        setData,\n        setSelectedRegion\n      }}\n    >\n      {children}\n    </CountryContext.Provider>\n  )\n}\n\nexport default CountryContext\n","\nconst Input = ({ classname, type, placeholder }) => {\n\n  return (\n    <input className={classname} type={type} placeholder={placeholder} />\n  )\n}\n\nexport default Input\n","\nconst Select = ({ action, classname, regions, name }) => {\n\n/** Put the regions in an object array. */\n/** Default is All Regions. */\n  const options = regions.map((region, index) => {\n    \n    return index !== 0 ? (<option key={index} value={region}>{region}</option>)\n     : (<option  key={index} defaultValue={region}>{region}</option>)\n  });\n\n  /** onChange is used to call function selecting region. */\n  return (\n    <div className='select-container head-obj'>\n      <select onChange={action} className={classname} name={name} id=\"\">{options}</select>\n    </div>\n  )\n}\n\nexport default Select\n","import { useContext } from 'react'\nimport { CountryContext } from './CountryContext'\nimport { FaSearch } from 'react-icons/fa'\nimport Input from './Input'\nimport Select from './Select';\n\nconst SearchBar = ({ regions }) => {\n\n  const country = useContext(CountryContext);\n\n  /** Handles Country search and Region selection. */\n  function handleSearch(e) {\n    try {\n      e.preventDefault();\n      \n      if (e.target.tagName === 'FORM') {\n        const searchID = e.target[1].value.toLowerCase();   /** search-input */\n        scrollToCard(searchID);\n      } \n      else if (e.target.tagName === 'SELECT') {\n        const dat = country.data;                     /** Copy of original data. */\n        const selectedID = e.target.value;            /** select-region */\n        \n        if (selectedID === 'All Regions') {\n            country.setSelectedRegion(country.data);  /** All Regions, use full data. */\n        } \n        else {\n          const data = dat.filter(item => {           /** Reduce data to selected region. */\n            return item.region === selectedID;\n          });\n\n          country.setSelectedRegion(data)             /** Use regionalized data. */\n        }\n        scrollToTop();                                /** Go to top of page on region selection. */                        \n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return (\n      <form className='search-form' onSubmit={handleSearch} action=''>\n        <div className='search-input-container head-obj'>\n          <button type=\"submit\" className=\"button search-input-btn\" href=\"#\"><FaSearch /></button>\n          <Input id='search-input' classname='search-input' type='text' placeholder='Search...' />\n        </div>\n        <Select action={e => handleSearch(e)} classname='search-region' regions={regions} name='option'/>\n      </form>\n  )\n}\n\nexport default SearchBar\n\n/** Scroll to the card where parameter is part of class name. */ \n/** Included class names are capital and country name. */\nfunction scrollToCard (string) {\n  let card = document.getElementById(string);   /** Exact ID. */\n  card ? card.scrollIntoView(true) : card = document.querySelector(`[class*=${string}]`); card.scrollIntoView(true);    /** false: to bottom of screen, true: to top. */ \n  window.scrollBy(0, -104);     /** Scrolls back down to bottom of Header. */\n}\n\n/** Scroll to top of page. */\nfunction scrollToTop () {\n  document.body.scrollTop = 0;\n  document.documentElement.scrollTop = 0;\n}\n","import { FaRegMoon } from 'react-icons/fa'\nimport SearchBar from './SearchBar'\n// FaMoon\n//  FaRegMoon\n// IoMoonOutline\n\nconst Header = ({ regions }) => (\n  <div className='title-bar'>\n    <p className='title'>Nations Of The World</p>\n    <SearchBar regions={regions} />\n    {/* <button onClick={toggleDarkMode} className=\"button dark-mode-btn head-obj\" href=\"#\"><FaRegMoon />   Dark</button> */}\n    <button onClick={toggleDarkMode} className=\"button dark-mode-btn head-obj\" href=\"#\">Dark Mode</button>\n\n  </div>\n)\n\nexport default Header\n\nfunction toggleDarkMode () {\n  const element = document.body;\n  const btn = document.getElementsByClassName(\"dark-mode-btn\");\n  \n  element.classList.toggle('dark-mode');\n\n  if (btn[0].innerText === \"Dark Mode\")\n    btn[0].innerText = \"Light Mode\";\n  else\n    btn[0].innerText = \"Dark Mode\";\n}","\nconst Image = ({ classname, source }) => {\n  return (\n    <a href={source} target='_blank' rel='noreferrer'>\n      <img className={classname} src={source} alt='flag'/>\n    </a>\n  )\n}\n\nexport default Image\n","// import Paragraph from \"./Paragraph\"\n\nconst ParaSection = ({ quiz, reply }) => {\n  return (\n    <div className='para-section'>\n      <p className='para quiz'>{quiz}</p>\n      <p className='para reply'>{reply}</p>\n    </div>\n  )\n}\n\nexport default ParaSection\n","import ParaSection from './ParaSection'\n\nconst InfoSection = (props) => {\n  return (\n    <div className={props.classname}>\n      <h3 className={'info-header'}>{props.name}</h3>\n      <ParaSection quiz='Population: ' reply={props.population.toLocaleString()} />\n      <ParaSection quiz='Region: ' reply={props.region} />\n      <ParaSection quiz='Capital: ' reply={props.capital} />\n    </div>\n  )\n}\n\nexport default InfoSection\n","import Image from './Image'\nimport InfoSection from './InfoSection'\n\nconst CountryCard = ({ classname, nation, index }) => {\n\n  // const capital = nation.capital.toLowerCase();\n  // const name = nation.name.toLowerCase();\n  const capital = nation.capital;\n  const name = nation.name;\n\n  return (\n    // eslint-disable-next-line no-sequences\n    <div className={`${classname} ${capital} ${name}`} key={index} id={nation.name.toLowerCase()}>\n      <Image classname='small-flag' source={nation.flag} />\n      <InfoSection classname={'info-section'} name={nation.name} population={nation.population} region={nation.region} capital={nation.capital} />\n    </div>\n  )\n}\n\nexport default CountryCard","import CountryCard from './CountryCard'\nimport { useContext } from 'react'\nimport { CountryContext } from './CountryContext'\n\nconst ImagesContainer = ({ classname }) => {\n\n  const country = useContext(CountryContext);\n  const data = country.selectedRegion;\n\n  return (\n    <div className={classname}>\n      {\n        data.map((nation, index) => {\n          return <CountryCard classname={'country-card'} nation={nation} key={index} />\n        })\n      }\n    </div>\n  );\n}\n\nexport default ImagesContainer\n","\nconst Footer = ({ classname, text }) => {\n  return (\n    <footer className={classname}>{text}</footer>\n  )\n}\n\nexport default Footer\n","/*jshint esversion: 8 */\n\nimport { useContext, useEffect } from 'react'\nimport { CountryContext } from './components/CountryContext'\n// import axios from 'axios'\nimport Header from './components/Header'\nimport ImagesContainer from './components/ImagesContainer'\nimport Footer from './components/Footer'\n\nfunction App() {\n  \n  const country = useContext(CountryContext);\n  const countriesURL = \"https://restcountries.com/v2/all?fields=name,nativeName,flag,population,region,capital,subregion,topLevelDomain,currencies,languages,borders\";\n  const URL = countriesURL;\n  const footerText = `Copyright \\u00A9 2021 LCQ`\n\n  /** Axios API Request. */\n  // useEffect(() => {\n  //   const fetchData = async () => {\n  //     try {\n  //       const result = await axios(URL);\n  //       country.setData(result.data);              /** This Data stays original. */ \n  //       country.setSelectedRegion(result.data);    /** This Data is manipulated for search and selecting regions. */ \n  //     } catch (e) {\n  //       console.log(e);\n  //     }  \n  //   };\n  //   fetchData();\n  // }, []);\n\n\n  /** Fetch API Request. */\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(URL);\n        const data = await response.json();\n\n        console.log(data);\n\n        /** Remove any accents/diacretics from country names so it can be sorted correctly. */\n        data.forEach (item => {\n          item.name = item.name.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n          return data;\n        });\n\n        /** Sort by country name. */\n        sortNames(data);\n\n        country.setData(data);                /** This Data stays original. */ \n        country.setSelectedRegion(data);      /** This Data is manipulated for search and selecting regions. */ \n      } \n      catch (e) {\n        console.log(e);\n      }  \n    };\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n\n/** Select Regions. */\n  const regions = ['All Regions', 'Africa', 'Americas', 'Asia', 'Europe', 'Oceania', 'Polar'];\n\n  return (\n    <div className=\"container\">\n      <Header regions={regions} />\n      <ImagesContainer classname='images-container' />\n      <Footer classname='footer' text={footerText} />\n    </div>\n  );\n}\n\nexport default App;\n\n/** Sort names. */\nfunction sortNames (items) {\n\n  items.sort(function(a, b) {\n    var nameA = a.name.toLowerCase();   /** Ignore upper and lowercase. */ \n    var nameB = b.name.toLowerCase();   /** Ignore upper and lowercase. */\n    if (nameA < nameB) {\n      return -1;\n    }\n    if (nameA > nameB) {\n      return 1;\n    }\n\n    return 0;   /** Names must be equal. */\n  });\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import 'normalize.css'\nimport App from './App';\nimport { CountryProvider } from './components/CountryContext'\nimport reportWebVitals from './reportWebVitals';\n\n/** Wrap the App inside the CountryContext for global access of state. */\nReactDOM.render(\n  <React.StrictMode>\n    <CountryProvider>     \n      <App />\n    </CountryProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}